/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Animateria (https://sketchfab.com/Animateria)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/volcano-island-lowpoly-4a6591dc9fee40d8bfda8350683af9af
Title: Volcano Island Lowpoly
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { Mesh } from "three/src/Three.js";
import { useSpring, a, easings } from "@react-spring/three";
import * as THREE from "three";
interface VolcanoProps {
  cumulativePercentage: number;
}

const Volcano = ({ cumulativePercentage }: VolcanoProps) => {
  const [isTilted, setIsTilted] = useState(false);
  const { nodes, materials } = useGLTF("/volcano_island_lowpoly.glb");

  const ref: any = useRef();

  useEffect(() => {
    if (cumulativePercentage > 50) {
      setIsTilted(true);
    } else {
      setIsTilted(false);
    }
  }, [cumulativePercentage]);

  // sink
  const handlePosition = (percentage: number) => {
    if (percentage < 55) {
      return [0, -2, 0];
    } else if (percentage < 60) {
      return [0, -3, 0];
    } else if (percentage < 70) {
      return [0, -4, 0];
    } else if (percentage < 85) {
      return [0, -5, 0];
    } else if (percentage < 90) {
      return [0, -10, 0];
    } else if (percentage > 89 && percentage < 100) {
      return [0, -20, 0];
    } else if (percentage === 100) {
      return [0, -50, 0];
    } else return [0, 0, 0];
  };
  // tilt
  const handleRotation = (percentage: number) => {
    if (percentage < 55) {
      return [Math.PI / 80, 0, 0];
    } else if (percentage < 60) {
      return [Math.PI / 30, 0, 0];
    } else if (percentage < 90) {
      return [Math.PI / 20, 0, 0];
    } else if (percentage > 89) {
      return [Math.PI / 15, 0, 0];
    } else return [0, 0, 0];
  };

  const { position, rotation } = useSpring({
    position: isTilted ? handlePosition(cumulativePercentage) : [0, 0, 0],
    rotation: isTilted ? handleRotation(cumulativePercentage) : [0, 0, 0], // Tilts 30 degrees on X-axis when `isTilted` is true
    config: {
      duration: 5000,
      easing: easings.easeInOutCubic,
    },
  });

  useFrame(() => {
    ref.current.rotation.y += 0.001;
  });

  return (
    <group dispose={null} ref={ref}>
      <a.group // must specify each axis separately to avoid typescript error
        // underscore placeholders ignore unused values
        rotation-x={rotation.to((x) => x)}
        rotation-y={rotation.to((_, y) => y)}
        rotation-z={rotation.to((_, __, z) => z)}
        position={position.to((x, y, z) => [x, y, z])}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.Clouds_Clouds_0 as Mesh).geometry}
          material={materials.Clouds}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.5}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.hammock_hammock_0 as Mesh).geometry}
          material={materials.hammock}
          position={[180.509, 1151.676, 5904.325]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.5}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.skeleton_skeleton_0 as Mesh).geometry}
          material={materials.skeleton}
          position={[3541.67, 1110.094, 3568.021]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.5}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.Pyramid_Pyramid_0 as Mesh).geometry}
          material={materials.Pyramid}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.5}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.Island_Grass_Island_Grass_0 as Mesh).geometry}
          material={materials.Island_Grass}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.5}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.shrubbery_shrubbery_0 as Mesh).geometry}
          material={materials.shrubbery}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.5}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.Lava_bubble_Lava_bubble_0 as Mesh).geometry}
          material={materials.Lava_bubble}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.5}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.Volcanic_lava_Volcanic_lava_0 as Mesh).geometry}
          material={materials.Volcanic_lava}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.5}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.Palm_tree_2_Palm_tree_2_0 as Mesh).geometry}
          material={materials.Palm_tree_2}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.5}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.Palm_tree_1_Palm_tree_1_0 as Mesh).geometry}
          material={materials.Palm_tree_1}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.5}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.Volacano_Sand_Volacano_Sand_0 as Mesh).geometry}
          material={materials.Volacano_Sand}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.5}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.Volcano_Grass_Volcano_Grass_0 as Mesh).geometry}
          material={materials.Volcano_Grass}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.5}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.Volcano_Base_Volcano_Base_0 as Mesh).geometry}
          material={materials.Volcano_Base}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.5}
        />
      </a.group>
      <mesh
        castShadow={true}
        receiveShadow={true}
        geometry={(nodes.Ocean_Ocean_0 as Mesh).geometry}
        material={
          new THREE.MeshPhysicalMaterial({
            color: "#00eff7",
            roughness: 0.6,
            metalness: 0.1,
            reflectivity: 0.5,
            clearcoat: 0.3,
            clearcoatRoughness: 0.1,
            transparent: true,
            opacity: 0.95,
          })
        }
        rotation={[-Math.PI / 2, 0, 0]}
        scale={0.5}
      />
    </group>
  );
};

useGLTF.preload("/volcano_island_lowpoly.glb");

export default Volcano;
